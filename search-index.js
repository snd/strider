var searchIndex = {};
searchIndex['strider'] = {"items":[[0,"","strider","**[ringbuffer operations on multiple values at once]\n(trait.SliceRing.html)\nwith an\n[efficient implementation]\n(#performance)**",null,null],[3,"SliceRingImpl","","readable area starts at `first_readable` and goes until\n`next_writable`.\n`next_writable` is one after the last readable and not readable.",null,null],[12,"first_readable","","index into `buf` of the first element that could be read.\nonly gets incremented, never decremented.\nwraps around.",0,null],[12,"next_writable","","index into `buf` where the next element could we written.\nonly gets incremented, never decremented.\nwraps around at `buf.cap()`.",0,null],[12,"buf","","",0,null],[8,"SliceRing","","ringbuffer operations on slices",null,null],[10,"push_many_back","","appends `values` to the back of this ring.",1,null],[10,"drop_many_front","","removes `count` elements from the front of this ring.\nreturns how many elements were removed.\nreturns less than `count` if less elements are present\nin this ring.",1,{"inputs":[{"name":"slicering"},{"name":"usize"}],"output":{"name":"usize"}}],[10,"read_many_front","","copies the first `output.len()` elements present in this ring\ninto `output`.\nreturns how many elements were copied.\nreturns less than `output.len()` if there are less elements present\nin this ring.",1,null],[11,"push_many_back","collections::vec_deque","",2,null],[11,"drop_many_front","","",2,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"read_many_front","","",2,null],[11,"new","strider","creates an empty `SliceRingImpl`.",0,{"inputs":[{"name":"sliceringimpl"}],"output":{"name":"sliceringimpl"}}],[11,"with_capacity","","creates an empty `SliceRingImpl` with space for at least `n` elements.",0,{"inputs":[{"name":"sliceringimpl"},{"name":"usize"}],"output":{"name":"sliceringimpl"}}],[11,"cap","","",0,{"inputs":[{"name":"sliceringimpl"}],"output":{"name":"usize"}}],[11,"capacity","","",0,{"inputs":[{"name":"sliceringimpl"}],"output":{"name":"usize"}}],[11,"is_continuous","","",0,{"inputs":[{"name":"sliceringimpl"}],"output":{"name":"bool"}}],[11,"len","","returns the number of elements in the `SliceRingImpl`",0,{"inputs":[{"name":"sliceringimpl"}],"output":{"name":"usize"}}],[11,"wrap_add","","returns the index into the underlying buffer\nfor a given logical element\nindex + addend",0,{"inputs":[{"name":"sliceringimpl"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"handle_cap_increase","","this is the most complex part\nFrobs the head and tail sections around to handle the fact that we\njust reallocated. Unsafe because it trusts old_cap.",0,{"inputs":[{"name":"sliceringimpl"},{"name":"usize"}],"output":null}],[11,"push_many_back","","",0,null],[11,"drop_many_front","","",0,{"inputs":[{"name":"sliceringimpl"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"read_many_front","","",0,null],[14,"test_slice_ring!","","macro containing a test run that is used to test and benchmark\ndifferent implementations of the `SliceRing` trait",null,null]],"paths":[[3,"SliceRingImpl"],[8,"SliceRing"],[3,"VecDeque"]]};
initSearch(searchIndex);
